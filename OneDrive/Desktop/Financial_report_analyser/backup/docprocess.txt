import os
from pypdf import PdfReader
from typing import List
from services.vector_store import VectorStore
import traceback

class DocumentProcessor:
    def __init__(self):
        self.vector_store = VectorStore()

    def extract_text_from_pdf(self, pdf_path: str) -> str:
        text = ""
        try:
            reader = PdfReader(pdf_path)
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
        except Exception as e:
            print(f"[DocumentProcessor Error] {e}")
            traceback.print_exc()

        return text

    def chunk_text(self, text: str, chunk_size=500, overlap=50) -> List[str]:
        chunks = []
        start = 0
        while start < len(text):
            end = start + chunk_size
            chunk = text[start:end]
            chunks.append(chunk.strip())
            start += chunk_size - overlap
        return chunks
    
    def process_and_store(self, pdf_path: str, collection_name:str):
        text = self.extract_text_from_pdf(pdf_path)
        if not text:
            print(f"[DocumentProcessor] No text extracted from {pdf_path}")
            return
        
        chunks = self.chunk_text(text)
        if not chunks:
            print(f"[DocumentProcessor] No chunks created from text in {pdf_path}")
            return
        metadatas = [{"source": os.path.basename(pdf_path)} for _ in chunks]
        
        ids = [f"{os.path.basename(pdf_path)}_chunk_{i}" for i in range(len(chunks))]
        


        self.vector_store.add_documents(
            collection_name=collection_name,
            documents=chunks,
            metadatas=metadatas,
            ids=ids
        )
        print(f"[DocumentProcessor] Processed and stored {len(chunks)} chunks from {pdf_path} into collection '{collection_name}'")